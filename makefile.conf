# Selecting Core
CORTEX_M?=0

# Default std lib
NO_STDLIB?=1

# Build Config
DEBUG?=1

# Handling the std lib inclusion for linker 
ifeq ($(NO_STDLIB), 1)
STD_LIB=-nostdlib
else
STD_LIB=--specs=nano.specs
endif

# Use seimhosting or not
USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST=--specs=nosys.specs

CORE=CM$(CORTEX_M)
LANG=-std=c11
COV=-fprofile-arcs -ftest-coverage 
LCOV=-lgcov --coverage

# Paths 
BASE=$(realpath .)
OUT=$(realpath .)/out
SRC=$(realpath .)/src

# Compiler & Linker
ARM_CC=arm-none-eabi-gcc
CC=gcc
CXX=arm-none-eabi-g++

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m$(CORTEX_M)

# Startup code
STARTUP=$(BASE)/startup/startup_ARM$(CORE).S

# Append optimization levels
ifeq ($(DEBUG), 1)
CFLAGS=-O0 -g
else
CFLAGS=-Os
endif

# -Os -flto -ffunction-sections -fdata-sections to compile for code size
CFLAGS+=-ansi $(LANG) $(COV)
ARM_CFLAGS=$(CFLAGS) $(ARCH_FLAGS) $(STARTUP_DEFS) -flto -ffunction-sections -fdata-sections
CXXFLAGS=$(CFLAGS)

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(OUT)/$(NAME).map

# Dissasembly
ARM_DIS=arm-none-eabi-objdump
DIS=objdump
