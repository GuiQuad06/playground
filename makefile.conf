# Selecting Core
CORTEX_M?=0

# Default std lib
NO_STDLIB?=1
SEMIHOSTING?=0

# Build Config
DEBUG?=1

# Handling the std lib inclusion for linker 
# Case we want no std lib
ifeq ($(NO_STDLIB), 1)
STD_LIB=-nostdlib
else
# Case we want to use semi hosting
ifeq ($(SEMIHOSTING), 1)
STD_LIB=--specs=rdimon.specs
# Case we are using Newlib Nano
else
STD_LIB=--specs=nano.specs
endif
endif

CORE=CM$(CORTEX_M)
LANG=-std=c11
COV=-fprofile-arcs -ftest-coverage 
LCOV=-lgcov --coverage

# Paths 
BASE=$(realpath .)
OUT=$(realpath .)/out
SRC=$(realpath .)/src

# Compiler & Linker
# Run set_env_baremetal_toolchain.sh to make CROSS_COMPILE visible 
CC=gcc
ARM_CC="$(CROSS_COMPILE)$(CC)"

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m$(CORTEX_M)

# Startup code
STARTUP=$(BASE)/startup/startup_ARM$(CORE).S

# Append optimization levels
ifeq ($(DEBUG), 1)
CFLAGS=-O0 -g
else
CFLAGS=-Os
endif

# -Os -flto -ffunction-sections -fdata-sections to compile for code size
CFLAGS+=-ansi -Wall -pedantic $(LANG) $(COV)
ARM_CFLAGS=$(CFLAGS) $(ARCH_FLAGS) $(STARTUP_DEFS) -flto -ffunction-sections -fdata-sections

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(OUT)/$(NAME).map

# Dissasembly
DIS=objdump
ARM_DIS="$(CROSS_COMPILE)$(DIS)"
